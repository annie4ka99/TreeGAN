<start> ::= <white-space-character-list-opt> <translation-unit>
//        | <white-space-character-list-opt> <preprocessing-file>
//        | <start> <translation-unit>
//        | <start> <preprocessing-file>

// A.1 Lexical grammar
//  A.1.1 Lexical elements

<token> ::= <keyword>
          | <identifier>
          | <constant>
          | <string-literal>
          | <punctuator>

<preprocessing-token> ::= <header-name>
                        | <identifier>
                        | <pp-number>
                        | <character-constant>
                        | <string-literal>
                        | <punctuator>
                        | <non-white-space-character>

<non-white-space-character> ::=
"a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" |
"u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" |
"O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
"8" | "9" | "!" | "\"" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" |
"=" | ">" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"

//  A.1.2 Keywords

<keyword> ::=
"auto" | "break" | "case" | "char" | "const" | "continue" | "default" | "do" | "double" | "else" | "enum" |
"extern" | "float" | "for" | "goto" | "if" | "inline" | "int" | "long" | "register" | "restrict" | "return" | "short" |
"signed" | "sizeof" | "static" | "struct" | "switch" | "union" | "unsigned" | "void" | "volatile" | "while" |
"_Alignas" | "_Alignof" | "_Atomic" | "_Bool" | "_Complex" | "_Generic" | "_Imaginary" | "_Noreturn" |
"_Static_assert" | "_Thread_local"

//  A.1.3 Identifiers

<identifier-opt> ::= "" | <identifier>

<identifier> ::= <identifier-nondigit>
               | <identifier> <identifier-nondigit>
               | <identifier> <digit>

<identifier-nondigit> ::= <nondigit>
                        | <universal-character-name>
// other implementation-defined characters

<nondigit> ::=
"_" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" |
"t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" |
"N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

//  A.1.4 Universal character names

<universal-character-name> ::= "\\u" <hex-quad>
                             | "\\U" <hex-quad> <hex-quad>

<hex-quad> ::= <hexadecimal-digit> <hexadecimal-digit> <hexadecimal-digit> <hexadecimal-digit>

//  A.1.5 Constants

<constant> ::= <integer-constant>
             | <floating-constant>
             | <enumeration-constant>
             | <character-constant>

<integer-constant> ::= <decimal-constant> <integer-suffix-opt>
                     | <octal-constant> <integer-suffix-opt>
                     | <hexadecimal-constant> <integer-suffix-opt>

<decimal-constant> ::= <nonzero-digit>
                     | <decimal-constant> <digit>

<octal-constant> ::= "0"
                   | <octal-constant> <octal-digit>

<hexadecimal-constant> ::= <hexadecimal-prefix> <hexadecimal-digit>
                         | <hexadecimal-constant> <hexadecimal-digit>

<hexadecimal-prefix> ::= "0x" | "0X"

<nonzero-digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<octal-digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"

<hexadecimal-digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
                      | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

<integer-suffix-opt> ::= "" | <integer-suffix>

<integer-suffix> ::= <unsigned-suffix> <long-suffix-opt>
                   | <unsigned-suffix> <long-long-suffix>
                   | <long-suffix> <unsigned-suffix-opt>
                   | <long-long-suffix> <unsigned-suffix-opt>

<unsigned-suffix-opt> ::= "" | <unsigned-suffix>

<unsigned-suffix> ::= "u" | "U"

<long-suffix-opt> ::= "" | <long-suffix>

<long-suffix> ::= "l" | "L"

<long-long-suffix> ::= "ll" | "LL"

<floating-constant> ::= <decimal-floating-constant>
                      | <hexadecimal-floating-constant>

<decimal-floating-constant> ::= <fractional-constant> <exponent-part-opt> <floating-suffix-opt>
                              | <digit-sequence> <exponent-part> <floating-suffix-opt>

<hexadecimal-floating-constant> ::=
<hexadecimal-prefix> <hexadecimal-fractional-constant> <binary-exponent-part> <floating-suffix-opt> |
<hexadecimal-prefix> <hexadecimal-digit-sequence> <binary-exponent-part> <floating-suffix-opt>

<fractional-constant> ::= <digit-sequence-opt> "." <digit-sequence>
                        | <digit-sequence> "."

<exponent-part-opt> ::= "" | <exponent-part>

<exponent-part> ::= "e" <sign-opt> <digit-sequence>
                  | "E" <sign-opt> <digit-sequence>

<sign-opt> ::= "" | <sign>

<sign> ::= "+" | "-"

<digit-sequence-opt> ::= "" | <digit-sequence>

<digit-sequence> ::= <digit>
                   | <digit-sequence> <digit>

<hexadecimal-fractional-constant> ::= <hexadecimal-digit-sequence-opt> "." <hexadecimal-digit-sequence>
                                    | <hexadecimal-digit-sequence> "."

<binary-exponent-part> ::= "p" <sign-opt> <digit-sequence>
                         | "P" <sign-opt> <digit-sequence>

<hexadecimal-digit-sequence-opt> ::= "" | <hexadecimal-digit-sequence>

<hexadecimal-digit-sequence> ::= <hexadecimal-digit>
                               | <hexadecimal-digit-sequence> <hexadecimal-digit>

<floating-suffix-opt> ::= "" | <floating-suffix>

<floating-suffix> ::= "f" | "l" | "F" | "L"

<enumeration-constant> ::= <identifier>

<character-constant> ::= "'" <c-char-sequence> "'"
                       | "L'" <c-char-sequence> "'"
                       | "u'" <c-char-sequence> "'"
                       | "U'" <c-char-sequence> "'"

<c-char-sequence> ::= <c-char>
                    | <c-char-sequence> <c-char>

<c-char> ::=
"a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" |
"u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" |
"O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
"8" | "9" | " " | "!" | "\"" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" |
"=" | ">" | "?" | "@" | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" | <escape-sequence>

<escape-sequence> ::= <simple-escape-sequence>
                    | <octal-escape-sequence>
                    | <hexadecimal-escape-sequence>
                    | <universal-character-name>

<simple-escape-sequence> ::= "\\'" | "\\\"" | "\\?" | "\\\\" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"

<octal-escape-sequence> ::= "\\" <octal-digit>
                          | "\\" <octal-digit> <octal-digit>
                          | "\\" <octal-digit> <octal-digit> <octal-digit>

<hexadecimal-escape-sequence> ::= "\\x" <hexadecimal-digit>
                                | <hexadecimal-escape-sequence> <hexadecimal-digit>

//  A.1.6 String literals

<string-literal> ::= <encoding-prefix-opt> "\"" <s-char-sequence-opt> "\""

<encoding-prefix-opt> ::= "" | <encoding-prefix>

<encoding-prefix> ::= "u8" | "u" | "U" | "L"

<s-char-sequence-opt> ::= "" | <s-char-sequence>

<s-char-sequence> ::= <s-char>
                    | <s-char-sequence> <s-char>

<s-char> ::=
"a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" |
"u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" |
"O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
"8" | "9" | " " | "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" |
"=" | ">" | "?" | "@" | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" | <escape-sequence>

//  A.1.7 Punctuators

<punctuator> ::= "[" | "]" | "(" | ")" | "{" | "}" | "." | "->" | "++" | "--" | "&" | "*" | "+" | "-" | "~" | "!" |
"/" | "%" | "<<" | ">>" | "<" | ">" | "<=" | ">=" | "==" | "!=" | "^" | "|" | "&&" | "||" | "?" | ":" | ";" | "..." |
"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" | "," | "#" | "##" | "<:" | ":>" | "<%" |
"%>" | "%:" | "%:%:"

//  A.1.8 Header names

<header-name> ::= "<" <h-char-sequence> ">"
                | "\"" <q-char-sequence> "\""

<h-char-sequence> ::= <h-char>
                    | <h-char-sequence> <h-char>

<h-char> ::=
"a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" |
"u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" |
"O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
"8" | "9" | " " | "!" | "\"" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" |
"<" | "=" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"

<q-char-sequence> ::= <q-char>
                    | <q-char-sequence> <q-char>

<q-char> ::=
"a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" |
"u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" |
"O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
"8" | "9" | " " | "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" |
"=" | ">" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"

//  A.1.9 Preprocessing numbers

<pp-number> ::= <digit>
              | "." <digit>
              | <pp-number> <digit>
              | <pp-number> <identifier-nondigit>
              | <pp-number> "e" <sign>
              | <pp-number> "E" <sign>
              | <pp-number> "p" <sign>
              | <pp-number> "P" <sign>
              | <pp-number> "."

// A.2 Phrase structure grammar
//  A.2.1 Expressions

<primary-expression> ::= <identifier> <white-space-character-list-opt>
                       | <constant> <white-space-character-list-opt>
                       | <string-literal> <white-space-character-list-opt>
                       | "(" <white-space-character-list-opt> <expression> ")" <white-space-character-list-opt>
                       | <generic-selection>

<generic-selection> ::= "_Generic(" <white-space-character-list-opt> <assignment-expression> "," <white-space-character-list-opt> <generic-assoc-list> ")" <white-space-character-list-opt>

<generic-assoc-list> ::= <generic-association>
                       | <generic-assoc-list> "," <white-space-character-list-opt> <generic-association>

<generic-association> ::= <type-name> ":" <white-space-character-list-opt> <assignment-expression>
                        | "default" <white-space-character-list-opt> ":" <white-space-character-list-opt> <assignment-expression>

<postfix-expression> ::= <primary-expression>
                       | <postfix-expression> "[" <white-space-character-list-opt> <expression> "]" <white-space-character-list-opt>
                       | <postfix-expression> "(" <white-space-character-list-opt> <argument-expression-list-opt> ")" <white-space-character-list-opt>
                       | <postfix-expression> "." <white-space-character-list-opt> <identifier> <white-space-character-list-opt>
                       | <postfix-expression> "->" <white-space-character-list-opt> <identifier> <white-space-character-list-opt>
                       | <postfix-expression> "++" <white-space-character-list-opt>
                       | <postfix-expression> "--" <white-space-character-list-opt>
                       | "(" <white-space-character-list-opt> <type-name> ")" <white-space-character-list-opt> "{" <white-space-character-list-opt> <initializer-list> "}" <white-space-character-list-opt>
                       | "(" <white-space-character-list-opt> <type-name> ")" <white-space-character-list-opt> "{" <white-space-character-list-opt> <initializer-list> "," <white-space-character-list-opt> "}" <white-space-character-list-opt>

<argument-expression-list-opt> ::= "" | <argument-expression-list>

<argument-expression-list> ::= <assignment-expression>
                             | <argument-expression-list> "," <white-space-character-list-opt> <assignment-expression>

<unary-expression> ::= <postfix-expression>
                     | "++" <white-space-character-list-opt> <unary-expression>
                     | "--" <white-space-character-list-opt> <unary-expression>
                     | <unary-operator> <white-space-character-list-opt> <cast-expression>
                     | "sizeof" <white-space-character-list-opt> <unary-expression>
                     | "sizeof" <white-space-character-list-opt> "(" <white-space-character-list-opt> <type-name> ")" <white-space-character-list-opt>
                     | "_Alignof(" <white-space-character-list-opt> <type-name> ")" <white-space-character-list-opt>

<unary-operator> ::= "&" | "*" | "+" | "-" | "~" | "!"

<cast-expression> ::= <unary-expression>
                    | "(" <white-space-character-list-opt> <type-name> ")" <white-space-character-list-opt> <cast-expression>

<multiplicative-expression> ::= <cast-expression>
                              | <multiplicative-expression> "*" <white-space-character-list-opt> <cast-expression>
                              | <multiplicative-expression> "/" <white-space-character-list-opt> <cast-expression>
                              | <multiplicative-expression> "%" <white-space-character-list-opt> <cast-expression>

<additive-expression> ::= <multiplicative-expression>
                        | <additive-expression> "+" <white-space-character-list-opt> <multiplicative-expression>
                        | <additive-expression> "-" <white-space-character-list-opt> <multiplicative-expression>

<shift-expression> ::= <additive-expression>
                     | <shift-expression> "<<" <white-space-character-list-opt> <additive-expression>
                     | <shift-expression> ">>" <white-space-character-list-opt> <additive-expression>

<relational-expression> ::= <shift-expression>
                          | <relational-expression> "<" <white-space-character-list-opt> <shift-expression>
                          | <relational-expression> ">" <white-space-character-list-opt> <shift-expression>
                          | <relational-expression> "<=" <white-space-character-list-opt> <shift-expression>
                          | <relational-expression> ">=" <white-space-character-list-opt> <shift-expression>

<equality-expression> ::= <relational-expression>
                        | <equality-expression> "==" <white-space-character-list-opt> <relational-expression>
                        | <equality-expression> "!=" <white-space-character-list-opt> <relational-expression>

<AND-expression> ::= <equality-expression>
                   | <AND-expression> "&" <white-space-character-list-opt> <equality-expression>

<exclusive-OR-expression> ::= <AND-expression>
                            | <exclusive-OR-expression> "^" <white-space-character-list-opt> <AND-expression>

<inclusive-OR-expression> ::= <exclusive-OR-expression>
                            | <inclusive-OR-expression> "|" <white-space-character-list-opt> <exclusive-OR-expression>

<logical-AND-expression> ::= <inclusive-OR-expression>
                           | <logical-AND-expression> "&&" <white-space-character-list-opt> <inclusive-OR-expression>

<logical-OR-expression> ::= <logical-AND-expression>
                          | <logical-OR-expression> "||" <white-space-character-list-opt> <logical-AND-expression>

<conditional-expression> ::= <logical-OR-expression>
                           | <logical-OR-expression> "?" <white-space-character-list-opt> <expression> ":" <white-space-character-list-opt> <conditional-expression>

<assignment-expression-opt> ::= "" | <assignment-expression>

<assignment-expression> ::= <conditional-expression>
                          | <unary-expression> <assignment-operator> <white-space-character-list-opt> <assignment-expression>

<assignment-operator> ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|="

<expression-opt> ::= "" | <expression>

<expression> ::= <assignment-expression>
               | <expression> "," <white-space-character-list-opt> <assignment-expression>

<constant-expression> ::= <conditional-expression>

//  A.2.2 Declarations

<declaration> ::= <declaration-specifiers> <init-declarator-list-opts> ";" <white-space-character-list-opt>
                | <static_assert-declaration>

<declaration-specifiers> ::= <storage-class-specifier> <declaration-specifiers-after-white-spaces-opt>
                           | <type-specifier> <declaration-specifiers-after-white-spaces-opt>
                           | <type-qualifier> <declaration-specifiers-after-white-spaces-opt>
                           | <function-specifier> <declaration-specifiers-after-white-spaces-opt>
                           | <alignment-specifier> <declaration-specifiers-after-white-spaces-opt>

<init-declarator-list-opts> ::= <init-declarator-list>
                              | <white-space-character-list-opt>

<init-declarator-list> ::= <left-whitespace-init-declarator>
                         | <init-declarator-list> "," <white-space-character-list-opt> <init-declarator>

<left-whitespace-init-declarator> ::= <left-whitespace-declarator>
                                    | <left-whitespace-declarator> "=" <white-space-character-list-opt> <initializer>

<init-declarator> ::= <declarator>
                    | <declarator> "=" <white-space-character-list-opt> <initializer>

<storage-class-specifier> ::= "extern" | "static" | "_Thread_local" | "auto" | "register"

<type-specifier> ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" |
"_Bool" | "_Complex" | <atomic-type-specifier> | <struct-or-union-specifier> | <enum-specifier>

<struct-or-union-specifier> ::= <struct-or-union> <white-space-character-list-opt> <identifier-opt> <white-space-character-list-opt> "{" <white-space-character-list-opt> <struct-declaration-list> "}"
                              | <struct-or-union> <white-space-character-list-opt> <identifier>

<struct-or-union> ::= "struct" | "union"

<struct-declaration-list> ::= <struct-declaration>
                            | <struct-declaration-list> <struct-declaration>

<struct-declaration> ::= <specifier-qualifier-list> <struct-declarator-list-opts> ";" <white-space-character-list-opt>
                       | <static_assert-declaration>

<specifier-qualifier-list> ::= <type-specifier> <specifier-qualifier-list-after-whitespaces-opt>
                             | <type-qualifier> <specifier-qualifier-list-after-whitespaces-opt>

<struct-declarator-list-opts> ::= <struct-declarator-list>
                                | <white-space-character-list-opt>

<struct-declarator-list> ::= <left-whitespace-struct-declarator>
                           | <struct-declarator-list> "," <white-space-character-list-opt> <struct-declarator>

<left-whitespace-struct-declarator> ::= <left-whitespace-declarator>
                                      | <left-whitespace-declarator-opt> ":" <white-space-character-list-opt> <constant-expression>

<struct-declarator> ::= <declarator>
                      | <declarator-opt> ":" <white-space-character-list-opt> <constant-expression>

<enum-specifier> ::= "enum" <identifier-after-whitespaces-opt> <white-space-character-list-opt> "{" <white-space-character-list-opt> <enumerator-list> "}"
                   | "enum" <identifier-after-whitespaces-opt> <white-space-character-list-opt> "{" <white-space-character-list-opt> <enumerator-list> "," <white-space-character-list-opt> "}"
                   | "enum" <white-space-character-list> <identifier>

<enumerator-list> ::= <enumerator>
                    | <enumerator-list> "," <white-space-character-list-opt> <enumerator>

<enumerator> ::= <enumeration-constant> <white-space-character-list-opt>
               | <enumeration-constant> <white-space-character-list-opt> "=" <white-space-character-list-opt> <constant-expression>

<atomic-type-specifier> ::= "_Atomic(" <white-space-character-list-opt> <type-name> ")"

<type-qualifier> ::= "const" | "restrict" | "volatile" | "_Atomic"

<function-specifier> ::= "inline" | "_Noreturn"

<alignment-specifier> ::= "_Alignas(" <white-space-character-list-opt> <type-name> ")"
                        | "_Alignas(" <white-space-character-list-opt> <constant-expression> ")"

<left-whitespace-declarator-opt> ::= "" | <left-whitespace-declarator>

<left-whitespace-declarator> ::= <left-whitespace-pointer-opt> <white-space-character-list> <direct-declarator>

<left-whitespace-pointer-opt> ::= "" | <left-whitespace-pointer>

<left-whitespace-pointer> ::= <left-whitespace-type-qualifier-list-after-whitespaces-opt> <left-whitespace-pointer-asterisk>

<left-whitespace-pointer-asterisk> ::= <white-space-character-list-opt> "*" <left-whitespace-type-qualifier-list-after-whitespacesopt-opt>
                                     | <white-space-character-list-opt> "*" <left-whitespace-type-qualifier-list-after-whitespacesopt-opt> <left-whitespace-pointer-asterisk>

<left-whitespace-type-qualifier-list-after-whitespacesopt-opt> ::= "" | <left-whitespace-type-qualifier-list-after-whitespacesopt>

<left-whitespace-type-qualifier-list-after-whitespacesopt> ::= <white-space-character-list-opt> <left-whitespace-type-qualifier-list>

<left-whitespace-type-qualifier-list-after-whitespaces-opt> ::= "" | <left-whitespace-type-qualifier-list-after-whitespaces>

<left-whitespace-type-qualifier-list-after-whitespaces> ::= <white-space-character-list> <left-whitespace-type-qualifier-list>

<left-whitespace-type-qualifier-list> ::= <type-qualifier>
                                        | <type-qualifier> <white-space-character-list> <left-whitespace-type-qualifier-list>

<declarator-opt> ::= "" | <declarator>

<declarator> ::= <pointer-opt> <direct-declarator>

<direct-declarator> ::= <identifier> <white-space-character-list-opt>
                      | "(" <white-space-character-list-opt> <declarator> ")" <white-space-character-list-opt>
                      | <direct-declarator> "[" <white-space-character-list-opt> <type-qualifier-list-opt> <assignment-expression-opt> "]" <white-space-character-list-opt>
                      | <direct-declarator> "[" <white-space-character-list-opt> "static" <white-space-character-list> <type-qualifier-list-opt> <assignment-expression> "]" <white-space-character-list-opt>
                      | <direct-declarator> "[" <white-space-character-list-opt> <type-qualifier-list> "static" <white-space-character-list> <assignment-expression> "]" <white-space-character-list-opt>
                      | <direct-declarator> "[" <white-space-character-list-opt> <type-qualifier-list-opt> "*" <white-space-character-list-opt> "]" <white-space-character-list-opt>
                      | <direct-declarator> "(" <white-space-character-list-opt> <parameter-type-list> ")" <white-space-character-list-opt>
                      | <direct-declarator> "(" <white-space-character-list-opt> <identifier-list-opt> ")" <white-space-character-list-opt>

<pointer-opt> ::= "" | <pointer>

<pointer> ::= <type-qualifier-list-opt> <pointer-asterisk>

<pointer-asterisk> ::= "*" <white-space-character-list-opt> <type-qualifier-list-opt>
                     | "*" <white-space-character-list-opt> <type-qualifier-list-opt> <pointer-asterisk>

<type-qualifier-list-opt> ::= "" | <type-qualifier-list>

<type-qualifier-list> ::= <type-qualifier> <white-space-character-list-opt>
                        | <type-qualifier> <white-space-character-list> <type-qualifier-list>

<parameter-type-list-opt> ::= "" | <parameter-type-list>

<parameter-type-list> ::= <parameter-list>
                        | <parameter-list> "," <white-space-character-list-opt> "..." <white-space-character-list-opt>

<parameter-list> ::= <parameter-declaration>
                   | <parameter-list> "," <white-space-character-list-opt> <parameter-declaration>

<parameter-declaration> ::= <declaration-specifiers> <left-whitespace-declarator>
                          | <declaration-specifiers> <abstract-declarator-opts>

<identifier-list-opt> ::= "" | <identifier-list>

<identifier-list> ::= <identifier> <white-space-character-list-opt>
                    | <identifier-list> "," <white-space-character-list-opt> <identifier> <white-space-character-list-opt>

<type-name> ::= <specifier-qualifier-list> <abstract-declarator-opts>

<abstract-declarator-opts> ::= <abstract-declarator>
                             | <white-space-character-list-opt>

<abstract-declarator> ::= <left-whitespace-pointer> <white-space-character-list-opt>
                        | <left-whitespace-pointer-opt> <direct-abstract-declarator>

<direct-abstract-declarator-opt> ::= "" | <direct-abstract-declarator>

<direct-abstract-declarator> ::=
"(" <white-space-character-list-opt> <abstract-declarator> ")" <white-space-character-list-opt> |
<direct-abstract-declarator-opt> "[" <white-space-character-list-opt> <type-qualifier-list-opt> <assignment-expression-opt> "]" <white-space-character-list-opt> |
<direct-abstract-declarator-opt> "[" <white-space-character-list-opt> "static" <white-space-character-list> <type-qualifier-list-opt> <assignment-expression> "]" <white-space-character-list-opt> |
<direct-abstract-declarator-opt> "[" <white-space-character-list-opt> <type-qualifier-list> "static" <white-space-character-list> <assignment-expression> "]" <white-space-character-list-opt> |
<direct-abstract-declarator-opt> "[" <white-space-character-list-opt> "*" <white-space-character-list-opt> "]" <white-space-character-list-opt> |
<direct-abstract-declarator-opt> "(" <white-space-character-list-opt> <parameter-type-list-opt> ")" <white-space-character-list-opt>

<initializer> ::= <assignment-expression>
                | "{" <white-space-character-list-opt> <initializer-list> "}" <white-space-character-list-opt>
                | "{" <white-space-character-list-opt> <initializer-list> "," <white-space-character-list-opt> "}" <white-space-character-list-opt>

<initializer-list> ::= <designation-opt> <initializer>
                     | <initializer-list> "," <white-space-character-list-opt> <designation-opt> <initializer>

<designation-opt> ::= "" | <designation>

<designation> ::= <designator-list> "=" <white-space-character-list-opt>

<designator-list> ::= <designator>
                    | <designator-list> <designator>

<designator> ::= "[" <white-space-character-list-opt> <constant-expression> "]" <white-space-character-list-opt>
               | "." <white-space-character-list-opt> <identifier> <white-space-character-list-opt>

<static_assert-declaration> ::= "_Static_assert(" <white-space-character-list-opt> <constant-expression> "," <white-space-character-list-opt> <string-literal> <white-space-character-list-opt> ")" <white-space-character-list-opt> ";" <white-space-character-list-opt>

//  A.2.3 Statements

<statement> ::= <labeled-statement>
              | <compound-statement>
              | <expression-statement>
              | <selection-statement>
              | <iteration-statement>
              | <jump-statement>

<labeled-statement> ::= <identifier> <white-space-character-list-opt> ":" <white-space-character-list-opt> <statement>
                      | "case" <white-space-character-list> <constant-expression> ":" <white-space-character-list-opt> <statement>
                      | "default" <white-space-character-list-opt> ":" <white-space-character-list-opt> <statement>

<compound-statement> ::= "{" <white-space-character-list-opt> <block-item-list-opt> "}" <white-space-character-list-opt>

<block-item-list-opt> ::= "" | <block-item-list>

<block-item-list> ::= <block-item>
                    | <block-item-list> <block-item>

<block-item> ::= <declaration>
               | <statement>

<expression-statement> ::= <expression-opt> ";" <white-space-character-list-opt>

<selection-statement> ::= "if" <white-space-character-list-opt> "(" <white-space-character-list-opt> <expression> ")" <white-space-character-list-opt> <statement>
                        | "if" <white-space-character-list-opt> "(" <white-space-character-list-opt> <expression> ")" <white-space-character-list-opt> <statement> "else" <white-space-character-list-opt> <statement>
                        | "switch" <white-space-character-list-opt> "(" <white-space-character-list-opt> <expression> ")" <white-space-character-list-opt> <statement>

<iteration-statement> ::= "while" <white-space-character-list-opt> "(" <white-space-character-list-opt> <expression> ")" <white-space-character-list-opt> <statement>
                        | "do" <white-space-character-list-opt> <statement> "while" <white-space-character-list-opt> "(" <white-space-character-list-opt> <expression> ")" <white-space-character-list-opt> ";" <white-space-character-list-opt>
                        | "for" <white-space-character-list-opt> "(" <white-space-character-list-opt> <expression-opt> ";" <white-space-character-list-opt> <expression-opt> ";" <white-space-character-list-opt> <expression-opt> ")" <white-space-character-list-opt> <statement>
                        | "for" <white-space-character-list-opt> "(" <white-space-character-list-opt> <declaration> <expression-opt> ";" <white-space-character-list-opt> <expression-opt> ")" <white-space-character-list-opt> <statement>

<jump-statement> ::= "goto" <white-space-character-list> <identifier> <white-space-character-list-opt> ";" <white-space-character-list-opt>
                   | "continue" <white-space-character-list-opt> ";" <white-space-character-list-opt>
                   | "break" <white-space-character-list-opt> ";" <white-space-character-list-opt>
                   | "return" <expression-after-whitespaces-opt> <expression-opt> ";" <white-space-character-list-opt>

//  A.2.4 External definitions

<translation-unit> ::= <external-declaration>
                     | <translation-unit> <external-declaration>

<external-declaration> ::= <function-definition>
                         | <declaration>

<function-definition> ::= <declaration-specifiers> <left-whitespace-declarator> <declaration-list-opt> <compound-statement>

<declaration-list-opt> ::= "" | <declaration-list>

<declaration-list> ::= <declaration>
                     | <declaration-list> <declaration>

//  A.3 Preprocessing directives

<preprocessing-file> ::= <group-opt>

<group-opt> ::= "" | <group>

<group> ::= <group-part>
          | <group> <group-part>

<group-part> ::= <if-section>
               | <control-line>
               | <text-line>
               | "#" <non-directive>

<if-section> ::= <if-group> <elif-groups-opt> <else-group-opt> <endif-line>

<if-group> ::= "#if" <constant-expression> <new-line> <group-opt>
             | "#ifdef" <identifier> <new-line> <group-opt>
             | "#ifndef" <identifier> <new-line> <group-opt>

<elif-groups-opt> ::= "" | <elif-groups>

<elif-groups> ::= <elif-group>
                | <elif-groups> <elif-group>

<elif-group> ::= "#elif" <constant-expression> <new-line> <group-opt>

<else-group-opt> ::= "" | <else-group>

<else-group> ::= "#else" <new-line> <group-opt>

<endif-line> ::= "#endif" <new-line>

<control-line> ::= "#include" <pp-tokens> <new-line>
                 | "#define" <identifier> <replacement-list> <new-line>
                 | "#define" <identifier> <lparen> <identifier-list-opt> ")" <replacement-list> <new-line>
                 | "#define" <identifier> <lparen> "...)" <replacement-list> <new-line>
                 | "#define" <identifier> <lparen> <identifier-list> ",...)" <replacement-list> <new-line>
                 | "#undef" <identifier> <new-line>
                 | "#line" <pp-tokens> <new-line>
                 | "#error" <pp-tokens-opt> <new-line>
                 | "#pragma" <pp-tokens-opt> <new-line>
                 | "#" <new-line>

<text-line> ::= <pp-tokens-opt> <new-line>

<non-directive> ::= <pp-tokens> <new-line>

<lparen> ::= "("

<replacement-list> ::= <pp-tokens-opt>

<pp-tokens-opt> ::= "" | <pp-tokens>

<pp-tokens> ::= <preprocessing-token>
              | <pp-tokens> <preprocessing-token>

<new-line> ::= "\r\n" | "\n"

// B.1 Whitespace extensions
//  B.1.x Forced whitespace after certain keywords

<declaration-specifiers-after-white-spaces-opt> ::= "" | <declaration-specifiers-after-white-spaces>

<declaration-specifiers-after-white-spaces> ::= <white-space-character-list> <declaration-specifiers>

<specifier-qualifier-list-after-whitespaces-opt> ::= "" | <specifier-qualifier-list-after-whitespaces>

<specifier-qualifier-list-after-whitespaces> ::= <white-space-character-list> <specifier-qualifier-list>

<identifier-after-whitespaces-opt> ::= "" | <identifier-after-whitespaces>

<identifier-after-whitespaces> ::= <white-space-character-list> <identifier>

<expression-after-whitespaces-opt> ::= "" | <expression-after-whitespaces>

<expression-after-whitespaces> ::= <white-space-character-list> <expression>

//  B.1.x Standard whitespace

<white-space-character-list-opt> ::= "" | <white-space-character-list> <white-space-character-list-opt>

<white-space-character-list> ::= <white-space-character>
                               | <white-space-character> <white-space-character-list>

<white-space-character> ::= <space-character>
                          | <new-line>

<space-character> ::= " " | "\t"
