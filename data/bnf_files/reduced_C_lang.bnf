<start> ::= <white_space_character_list_opt> <translation_unit>
//        | <white_space_character_list_opt> <preprocessing_file>
//        | <start> <translation_unit>
//        | <start> <preprocessing_file>

// A.1 Lexical grammar
//  A.1.1 Lexical elements

<token> ::= <keyword>
          | <identifier>
          | <constant>
          | <string_literal>
          | <punctuator>

<non_white_space_character> ::= "$" | "@" | "\\" | "`"

//  A.1.2 Keywords

<keyword> ::= "auto" | "break" | "case" | "char" | "const" | "continue" | "default" | "do" | "double" | "else" | "enum"
| "extern" | "float" | "for" | "goto" | "if" | "inline" | "int" | "long" | "register" | "restrict" | "return" | "short"
| "signed" | "sizeof" | "static" | "struct" | "switch" | "union" | "unsigned" | "void" | "volatile" | "while"
| "_Alignas" | "_Alignof" | "_Atomic" | "_Bool" | "_Complex" | "_Generic" | "_Imaginary" | "_Noreturn"
| "_Static_assert" | "_Thread_local"

//  A.1.3 Identifiers

<identifier_opt> ::= "" | <identifier>

<identifier> ::= <identifier_nondigit>
               | <identifier> <identifier_nondigit>
               | <identifier> <digit>

<identifier_nondigit> ::= <nondigit>
                        | <universal_character_name>
// other implementation-defined characters

<nondigit> ::= "_" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q"
| "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K"
| "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

//  A.1.4 Universal character names

<universal_character_name> ::= "\\u" <hex_quad>
                             | "\\U" <hex_quad> <hex_quad>

<hex_quad> ::= <hexadecimal_digit> <hexadecimal_digit> <hexadecimal_digit> <hexadecimal_digit>

//  A.1.5 Constants

<constant> ::= <integer_constant>
             | <floating_constant>
             | <enumeration_constant>
             | <character_constant>

<integer_constant> ::= <decimal_constant> <integer_suffix_opt>
                     | <octal_constant> <integer_suffix_opt>
                     | <hexadecimal_constant> <integer_suffix_opt>

<decimal_constant> ::= <nonzero_digit>
                     | <decimal_constant> <digit>

<octal_constant> ::= "0"
                   | <octal_constant> <octal_digit>

<hexadecimal_constant> ::= <hexadecimal_prefix> <hexadecimal_digit>
                         | <hexadecimal_constant> <hexadecimal_digit>

<hexadecimal_prefix> ::= "0x" | "0X"

<nonzero_digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<octal_digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"

<hexadecimal_digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
                      | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

<integer_suffix_opt> ::= "" | <integer_suffix>

<integer_suffix> ::= <unsigned_suffix> <long_suffix_opt>
                   | <unsigned_suffix> <long_long_suffix>
                   | <long_suffix> <unsigned_suffix_opt>
                   | <long_long_suffix> <unsigned_suffix_opt>

<unsigned_suffix_opt> ::= "" | <unsigned_suffix>

<unsigned_suffix> ::= "u" | "U"

<long_suffix_opt> ::= "" | <long_suffix>

<long_suffix> ::= "l" | "L"

<long_long_suffix> ::= "ll" | "LL"

<floating_constant> ::= <decimal_floating_constant>
                      | <hexadecimal_floating_constant>

<decimal_floating_constant> ::= <fractional_constant> <exponent_part_opt> <floating_suffix_opt>
                              | <digit_sequence> <exponent_part> <floating_suffix_opt>

<hexadecimal_floating_constant> ::= <hexadecimal_prefix> <hexadecimal_fractional_constant> <binary_exponent_part> <floating_suffix_opt>
                                  | <hexadecimal_prefix> <hexadecimal_digit_sequence> <binary_exponent_part> <floating_suffix_opt>

<fractional_constant> ::= <digit_sequence_opt> "." <digit_sequence>
                        | <digit_sequence> "."

<exponent_part_opt> ::= "" | <exponent_part>

<exponent_part> ::= "e" <sign_opt> <digit_sequence>
                  | "E" <sign_opt> <digit_sequence>

<sign_opt> ::= "" | <sign>

<sign> ::= "+" | "-"

<digit_sequence_opt> ::= "" | <digit_sequence>

<digit_sequence> ::= <digit>
                   | <digit_sequence> <digit>

<hexadecimal_fractional_constant> ::= <hexadecimal_digit_sequence_opt> "." <hexadecimal_digit_sequence>
                                    | <hexadecimal_digit_sequence> "."

<binary_exponent_part> ::= "p" <sign_opt> <digit_sequence>
                         | "P" <sign_opt> <digit_sequence>

<hexadecimal_digit_sequence_opt> ::= "" | <hexadecimal_digit_sequence>

<hexadecimal_digit_sequence> ::= <hexadecimal_digit>
                               | <hexadecimal_digit_sequence> <hexadecimal_digit>

<floating_suffix_opt> ::= "" | <floating_suffix>

<floating_suffix> ::= "f" | "l" | "F" | "L"

<enumeration_constant> ::= <identifier>

<character_constant> ::= "'" <c_char_sequence> "'"
                       | "L'" <c_char_sequence> "'"
                       | "u'" <c_char_sequence> "'"
                       | "U'" <c_char_sequence> "'"

<c_char_sequence> ::= <c_char>
                    | <c_char_sequence> <c_char>

<c_char> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r"
| "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L"
| "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5"
| "6" | "7" | "8" | "9" | " " | "!" | "\"" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":"
| ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" | <escape_sequence>

<escape_sequence> ::= <simple_escape_sequence>
                    | <octal_escape_sequence>
                    | <hexadecimal_escape_sequence>
                    | <universal_character_name>

<simple_escape_sequence> ::= "\\'" | "\\\"" | "\\?" | "\\\\" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"

<octal_escape_sequence> ::= "\\" <octal_digit>
                          | "\\" <octal_digit> <octal_digit>
                          | "\\" <octal_digit> <octal_digit> <octal_digit>

<hexadecimal_escape_sequence> ::= "\\x" <hexadecimal_digit>
                                | <hexadecimal_escape_sequence> <hexadecimal_digit>

//  A.1.6 String literals

<string_literal> ::= <encoding_prefix_opt> "\"" <s_char_sequence_opt> "\""

<encoding_prefix_opt> ::= "" | <encoding_prefix>

<encoding_prefix> ::= "u8" | "u" | "U" | "L"

<s_char_sequence_opt> ::= "" | <s_char_sequence>

<s_char_sequence> ::= <s_char>
                    | <s_char_sequence> <s_char>

<s_char> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r"
| "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L"
| "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5"
| "6" | "7" | "8" | "9" | " " | "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":"
| ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" | <escape_sequence>

//  A.1.7 Punctuators

<punctuator> ::= "%:%:" | "..." | "<<=" | ">>=" | "->" | "++" | "--" | "<<" | "<=" | ">=" | "==" | "!=" | ">>" | "&&"
| "||" | "*=" | "/=" | "%=" | "+=" | "-=" | "&=" | "^=" | "|=" | "##" | "<:" | ":>" | "<%" | "%>" | "%:" | "[" | "]"
| "(" | ")" | "{" | "}" | "." | "&" | "*" | "+" | "-" | "~" | "!" | "/" | "%" | "<" | ">" | "^" | "|" | "?" | ":" | ";"
| "=" | ","

//  A.1.8 Header names

<header_name> ::= "<" <h_char_sequence> ">"
                | "\"" <q_char_sequence> "\""

<h_char_sequence> ::= <h_char>
                    | <h_char_sequence> <h_char>

<h_char> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r"
| "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L"
| "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5"
| "6" | "7" | "8" | "9" | " " | "!" | "\"" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/"
| ":" | ";" | "<" | "=" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"

<q_char_sequence> ::= <q_char>
                    | <q_char_sequence> <q_char>

<q_char> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r"
| "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L"
| "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5"
| "6" | "7" | "8" | "9" | " " | "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":"
| ";" | "<" | "=" | ">" | "?" | "@" | "[" | "\\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"

//  A.1.9 Preprocessing numbers

<pp_number> ::= <digit>
              | "." <digit>
              | <pp_number> <digit>
              | <pp_number> <identifier_nondigit>
              | <pp_number> "e" <sign>
              | <pp_number> "E" <sign>
              | <pp_number> "p" <sign>
              | <pp_number> "P" <sign>
              | <pp_number> "."

// A.2 Phrase structure grammar
//  A.2.1 Expressions

<primary_expression> ::= <identifier> <white_space_character_list_opt>
                       | <constant> <white_space_character_list_opt>
                       | <string_literal> <white_space_character_list_opt>
                       | "(" <white_space_character_list_opt> <expression> ")" <white_space_character_list_opt>
                       | <generic_selection>

<generic_selection> ::= "_Generic(" <white_space_character_list_opt> <assignment_expression> "," <white_space_character_list_opt> <generic_assoc_list> ")" <white_space_character_list_opt>

<generic_assoc_list> ::= <generic_association>
                       | <generic_assoc_list> "," <white_space_character_list_opt> <generic_association>

<generic_association> ::= <type_name> ":" <white_space_character_list_opt> <assignment_expression>
                        | "default" <white_space_character_list_opt> ":" <white_space_character_list_opt> <assignment_expression>

<postfix_expression> ::= <primary_expression>
                       | <postfix_expression> "[" <white_space_character_list_opt> <expression> "]" <white_space_character_list_opt>
                       | <postfix_expression> "(" <white_space_character_list_opt> <argument_expression_list_opt> ")" <white_space_character_list_opt>
                       | <postfix_expression> "." <white_space_character_list_opt> <identifier> <white_space_character_list_opt>
                       | <postfix_expression> "->" <white_space_character_list_opt> <identifier> <white_space_character_list_opt>
                       | <postfix_expression> "++" <white_space_character_list_opt>
                       | <postfix_expression> "--" <white_space_character_list_opt>
                       | "(" <white_space_character_list_opt> <type_name> ")" <white_space_character_list_opt> "{" <white_space_character_list_opt> <initializer_list> "}" <white_space_character_list_opt>
                       | "(" <white_space_character_list_opt> <type_name> ")" <white_space_character_list_opt> "{" <white_space_character_list_opt> <initializer_list> "," <white_space_character_list_opt> "}" <white_space_character_list_opt>

<argument_expression_list_opt> ::= "" | <argument_expression_list>

<argument_expression_list> ::= <assignment_expression>
                             | <argument_expression_list> "," <white_space_character_list_opt> <assignment_expression>

<unary_expression> ::= <postfix_expression>
                     | "++" <white_space_character_list_opt> <unary_expression>
                     | "--" <white_space_character_list_opt> <unary_expression>
                     | <unary_operator> <white_space_character_list_opt> <cast_expression>
                     | "sizeof" <white_space_character_list_opt> <unary_expression>
                     | "sizeof" <white_space_character_list_opt> "(" <white_space_character_list_opt> <type_name> ")" <white_space_character_list_opt>
                     | "_Alignof(" <white_space_character_list_opt> <type_name> ")" <white_space_character_list_opt>

<unary_operator> ::= "&" | "*" | "+" | "-" | "~" | "!"

<cast_expression> ::= <unary_expression>
                    | "(" <white_space_character_list_opt> <type_name> ")" <white_space_character_list_opt> <cast_expression>

<multiplicative_expression> ::= <cast_expression>
                              | <multiplicative_expression> "*" <white_space_character_list_opt> <cast_expression>
                              | <multiplicative_expression> "/" <white_space_character_list_opt> <cast_expression>
                              | <multiplicative_expression> "%" <white_space_character_list_opt> <cast_expression>

<additive_expression> ::= <multiplicative_expression>
                        | <additive_expression> "+" <white_space_character_list_opt> <multiplicative_expression>
                        | <additive_expression> "-" <white_space_character_list_opt> <multiplicative_expression>

<shift_expression> ::= <additive_expression>
                     | <shift_expression> "<<" <white_space_character_list_opt> <additive_expression>
                     | <shift_expression> ">>" <white_space_character_list_opt> <additive_expression>

<relational_expression> ::= <shift_expression>
                          | <relational_expression> "<" <white_space_character_list_opt> <shift_expression>
                          | <relational_expression> ">" <white_space_character_list_opt> <shift_expression>
                          | <relational_expression> "<=" <white_space_character_list_opt> <shift_expression>
                          | <relational_expression> ">=" <white_space_character_list_opt> <shift_expression>

<equality_expression> ::= <relational_expression>
                        | <equality_expression> "==" <white_space_character_list_opt> <relational_expression>
                        | <equality_expression> "!=" <white_space_character_list_opt> <relational_expression>

<AND_expression> ::= <equality_expression>
                   | <AND_expression> "&" <white_space_character_list_opt> <equality_expression>

<exclusive_OR_expression> ::= <AND_expression>
                            | <exclusive_OR_expression> "^" <white_space_character_list_opt> <AND_expression>

<inclusive_OR_expression> ::= <exclusive_OR_expression>
                            | <inclusive_OR_expression> "|" <white_space_character_list_opt> <exclusive_OR_expression>

<logical_AND_expression> ::= <inclusive_OR_expression>
                           | <logical_AND_expression> "&&" <white_space_character_list_opt> <inclusive_OR_expression>

<logical_OR_expression> ::= <logical_AND_expression>
                          | <logical_OR_expression> "||" <white_space_character_list_opt> <logical_AND_expression>

<conditional_expression> ::= <logical_OR_expression>
                           | <logical_OR_expression> "?" <white_space_character_list_opt> <expression> ":" <white_space_character_list_opt> <conditional_expression>

<assignment_expression_opt> ::= "" | <assignment_expression>

<assignment_expression> ::= <conditional_expression>
                          | <unary_expression> <assignment_operator> <white_space_character_list_opt> <assignment_expression>

<assignment_operator> ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|="

<expression_opt> ::= "" | <expression>

<expression> ::= <assignment_expression>
               | <expression> "," <white_space_character_list_opt> <assignment_expression>

<constant_expression> ::= <conditional_expression>

//  A.2.2 Declarations

<declaration> ::= <declaration_specifiers> <init_declarator_list_opts> ";" <white_space_character_list_opt>
                | <static_assert_declaration>

<declaration_specifiers> ::= <storage_class_specifier> <declaration_specifiers_after_white_spaces_opt>
                           | <type_specifier> <declaration_specifiers_after_white_spaces_opt>
                           | <type_qualifier> <declaration_specifiers_after_white_spaces_opt>
                           | <function_specifier> <declaration_specifiers_after_white_spaces_opt>
                           | <alignment_specifier> <declaration_specifiers_after_white_spaces_opt>

<init_declarator_list_opts> ::= <init_declarator_list>
                              | <white_space_character_list_opt>

<init_declarator_list> ::= <left_whitespace_init_declarator>
                         | <init_declarator_list> "," <white_space_character_list_opt> <init_declarator>

<left_whitespace_init_declarator> ::= <left_whitespace_declarator>
                                    | <left_whitespace_declarator> "=" <white_space_character_list_opt> <initializer>

<init_declarator> ::= <declarator>
                    | <declarator> "=" <white_space_character_list_opt> <initializer>

<storage_class_specifier> ::= "extern" | "static" | "_Thread_local" | "auto" | "register"

<type_specifier> ::=  "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool"
                   | "_Complex" | <atomic_type_specifier> | <struct_or_union_specifier> | <enum_specifier>

<struct_or_union_specifier> ::= <struct_or_union> <white_space_character_list_opt> <identifier_opt> <white_space_character_list_opt> "{" <white_space_character_list_opt> <struct_declaration_list> "}"
                              | <struct_or_union> <white_space_character_list_opt> <identifier>

<struct_or_union> ::= "struct" | "union"

<struct_declaration_list> ::= <struct_declaration>
                            | <struct_declaration_list> <struct_declaration>

<struct_declaration> ::= <specifier_qualifier_list> <struct_declarator_list_opts> ";" <white_space_character_list_opt>
                       | <static_assert_declaration>

<specifier_qualifier_list> ::= <type_specifier> <specifier_qualifier_list_after_whitespaces_opt>
                             | <type_qualifier> <specifier_qualifier_list_after_whitespaces_opt>

<struct_declarator_list_opts> ::= <struct_declarator_list>
                                | <white_space_character_list_opt>

<struct_declarator_list> ::= <left_whitespace_struct_declarator>
                           | <struct_declarator_list> "," <white_space_character_list_opt> <struct_declarator>

<left_whitespace_struct_declarator> ::= <left_whitespace_declarator>
                                      | <left_whitespace_declarator_opt> ":" <white_space_character_list_opt> <constant_expression>

<struct_declarator> ::= <declarator>
                      | <declarator_opt> ":" <white_space_character_list_opt> <constant_expression>

<enum_specifier> ::= "enum" <identifier_after_whitespaces_opt> <white_space_character_list_opt> "{" <white_space_character_list_opt> <enumerator_list> "}"
                   | "enum" <identifier_after_whitespaces_opt> <white_space_character_list_opt> "{" <white_space_character_list_opt> <enumerator_list> "," <white_space_character_list_opt> "}"
                   | "enum" <white_space_character_list> <identifier>

<enumerator_list> ::= <enumerator>
                    | <enumerator_list> "," <white_space_character_list_opt> <enumerator>

<enumerator> ::= <enumeration_constant> <white_space_character_list_opt>
               | <enumeration_constant> <white_space_character_list_opt> "=" <white_space_character_list_opt> <constant_expression>

<atomic_type_specifier> ::= "_Atomic(" <white_space_character_list_opt> <type_name> ")"

<type_qualifier> ::= "const" | "restrict" | "volatile" | "_Atomic"

<function_specifier> ::= "inline" | "_Noreturn"

<alignment_specifier> ::= "_Alignas(" <white_space_character_list_opt> <type_name> ")"
                        | "_Alignas(" <white_space_character_list_opt> <constant_expression> ")"

<left_whitespace_declarator_opt> ::= "" | <left_whitespace_declarator>

<left_whitespace_declarator> ::= <left_whitespace_pointer_opt> <white_space_character_list> <direct_declarator>

<left_whitespace_pointer_opt> ::= "" | <left_whitespace_pointer>

<left_whitespace_pointer> ::= <left_whitespace_type_qualifier_list_after_whitespaces_opt> <left_whitespace_pointer_asterisk>

<left_whitespace_pointer_asterisk> ::= <white_space_character_list_opt> "*" <left_whitespace_type_qualifier_list_after_whitespacesopt_opt>
                                     | <white_space_character_list_opt> "*" <left_whitespace_type_qualifier_list_after_whitespacesopt_opt> <left_whitespace_pointer_asterisk>

<left_whitespace_type_qualifier_list_after_whitespacesopt_opt> ::= "" | <left_whitespace_type_qualifier_list_after_whitespacesopt>

<left_whitespace_type_qualifier_list_after_whitespacesopt> ::= <white_space_character_list_opt> <left_whitespace_type_qualifier_list>

<left_whitespace_type_qualifier_list_after_whitespaces_opt> ::= "" | <left_whitespace_type_qualifier_list_after_whitespaces>

<left_whitespace_type_qualifier_list_after_whitespaces> ::= <white_space_character_list> <left_whitespace_type_qualifier_list>

<left_whitespace_type_qualifier_list> ::= <type_qualifier>
                                        | <type_qualifier> <white_space_character_list> <left_whitespace_type_qualifier_list>

<declarator_opt> ::= "" | <declarator>

<declarator> ::= <pointer_opt> <direct_declarator>

<direct_declarator> ::= <identifier> <white_space_character_list_opt>
                      | "(" <white_space_character_list_opt> <declarator> ")" <white_space_character_list_opt>
                      | <direct_declarator> "[" <white_space_character_list_opt> <type_qualifier_list_opt> <assignment_expression_opt> "]" <white_space_character_list_opt>
                      | <direct_declarator> "[" <white_space_character_list_opt> "static" <white_space_character_list> <type_qualifier_list_opt> <assignment_expression> "]" <white_space_character_list_opt>
                      | <direct_declarator> "[" <white_space_character_list_opt> <type_qualifier_list> "static" <white_space_character_list> <assignment_expression> "]" <white_space_character_list_opt>
                      | <direct_declarator> "[" <white_space_character_list_opt> <type_qualifier_list_opt> "*" <white_space_character_list_opt> "]" <white_space_character_list_opt>
                      | <direct_declarator> "(" <white_space_character_list_opt> <parameter_type_list> ")" <white_space_character_list_opt>
                      | <direct_declarator> "(" <white_space_character_list_opt> <identifier_list_opt> ")" <white_space_character_list_opt>

<pointer_opt> ::= "" | <pointer>

<pointer> ::= <type_qualifier_list_opt> <pointer_asterisk>

<pointer_asterisk> ::= "*" <white_space_character_list_opt> <type_qualifier_list_opt>
                     | "*" <white_space_character_list_opt> <type_qualifier_list_opt> <pointer_asterisk>

<type_qualifier_list_opt> ::= "" | <type_qualifier_list>

<type_qualifier_list> ::= <type_qualifier> <white_space_character_list_opt>
                        | <type_qualifier> <white_space_character_list> <type_qualifier_list>

<parameter_type_list_opt> ::= "" | <parameter_type_list>

<parameter_type_list> ::= <parameter_list>
                        | <parameter_list> "," <white_space_character_list_opt> "..." <white_space_character_list_opt>

<parameter_list> ::= <parameter_declaration>
                   | <parameter_list> "," <white_space_character_list_opt> <parameter_declaration>

<parameter_declaration> ::= <declaration_specifiers> <left_whitespace_declarator>
                          | <declaration_specifiers> <abstract_declarator_opts>

<identifier_list_opt> ::= "" | <identifier_list>

<identifier_list> ::= <identifier> <white_space_character_list_opt>
                    | <identifier_list> "," <white_space_character_list_opt> <identifier> <white_space_character_list_opt>

<type_name> ::= <specifier_qualifier_list> <abstract_declarator_opts>

<abstract_declarator_opts> ::= <abstract_declarator>
                             | <white_space_character_list_opt>

<abstract_declarator> ::= <left_whitespace_pointer> <white_space_character_list_opt>
                        | <left_whitespace_pointer_opt> <direct_abstract_declarator>

<direct_abstract_declarator_opt> ::= "" | <direct_abstract_declarator>

<direct_abstract_declarator> ::= "(" <white_space_character_list_opt> <abstract_declarator> ")" <white_space_character_list_opt>
                               | <direct_abstract_declarator_opt> "[" <white_space_character_list_opt> <type_qualifier_list_opt> <assignment_expression_opt> "]" <white_space_character_list_opt>
                               | <direct_abstract_declarator_opt> "[" <white_space_character_list_opt> "static" <white_space_character_list> <type_qualifier_list_opt> <assignment_expression> "]" <white_space_character_list_opt>
                               | <direct_abstract_declarator_opt> "[" <white_space_character_list_opt> <type_qualifier_list> "static" <white_space_character_list> <assignment_expression> "]" <white_space_character_list_opt>
                               | <direct_abstract_declarator_opt> "[" <white_space_character_list_opt> "*" <white_space_character_list_opt> "]" <white_space_character_list_opt>
                               | <direct_abstract_declarator_opt> "(" <white_space_character_list_opt> <parameter_type_list_opt> ")" <white_space_character_list_opt>

<initializer> ::= <assignment_expression>
                | "{" <white_space_character_list_opt> <initializer_list> "}" <white_space_character_list_opt>
                | "{" <white_space_character_list_opt> <initializer_list> "," <white_space_character_list_opt> "}" <white_space_character_list_opt>

<initializer_list> ::= <designation_opt> <initializer>
                     | <initializer_list> "," <white_space_character_list_opt> <designation_opt> <initializer>

<designation_opt> ::= "" | <designation>

<designation> ::= <designator_list> "=" <white_space_character_list_opt>

<designator_list> ::= <designator>
                    | <designator_list> <designator>

<designator> ::= "[" <white_space_character_list_opt> <constant_expression> "]" <white_space_character_list_opt>
               | "." <white_space_character_list_opt> <identifier> <white_space_character_list_opt>

<static_assert_declaration> ::= "_Static_assert(" <white_space_character_list_opt> <constant_expression> "," <white_space_character_list_opt> <string_literal> <white_space_character_list_opt> ")" <white_space_character_list_opt> ";" <white_space_character_list_opt>

//  A.2.3 Statements

<statement> ::= <labeled_statement>
              | <compound_statement>
              | <expression_statement>
              | <selection_statement>
              | <iteration_statement>
              | <jump_statement>

<labeled_statement> ::= <identifier> <white_space_character_list_opt> ":" <white_space_character_list_opt> <statement>
                      | "case" <white_space_character_list> <constant_expression> ":" <white_space_character_list_opt> <statement>
                      | "default" <white_space_character_list_opt> ":" <white_space_character_list_opt> <statement>

<compound_statement> ::= "{" <white_space_character_list_opt> <block_item_list_opt> "}" <white_space_character_list_opt>

<block_item_list_opt> ::= "" | <block_item_list>

<block_item_list> ::= <block_item>
                    | <block_item_list> <block_item>

<block_item> ::= <declaration>
               | <statement>

<expression_statement> ::= <expression_opt> ";" <white_space_character_list_opt>

<selection_statement> ::= "if" <white_space_character_list_opt> "(" <white_space_character_list_opt> <expression> ")" <white_space_character_list_opt> <statement>
                        | "if" <white_space_character_list_opt> "(" <white_space_character_list_opt> <expression> ")" <white_space_character_list_opt> <statement> "else" <white_space_character_list_opt> <statement>
                        | "switch" <white_space_character_list_opt> "(" <white_space_character_list_opt> <expression> ")" <white_space_character_list_opt> <statement>

<iteration_statement> ::= "while" <white_space_character_list_opt> "(" <white_space_character_list_opt> <expression> ")" <white_space_character_list_opt> <statement>
                        | "do" <white_space_character_list_opt> <statement> "while" <white_space_character_list_opt> "(" <white_space_character_list_opt> <expression> ")" <white_space_character_list_opt> ";" <white_space_character_list_opt>
                        | "for" <white_space_character_list_opt> "(" <white_space_character_list_opt> <expression_opt> ";" <white_space_character_list_opt> <expression_opt> ";" <white_space_character_list_opt> <expression_opt> ")" <white_space_character_list_opt> <statement>
                        | "for" <white_space_character_list_opt> "(" <white_space_character_list_opt> <declaration> <expression_opt> ";" <white_space_character_list_opt> <expression_opt> ")" <white_space_character_list_opt> <statement>

<jump_statement> ::= "goto" <white_space_character_list> <identifier> <white_space_character_list_opt> ";" <white_space_character_list_opt>
                   | "continue" <white_space_character_list_opt> ";" <white_space_character_list_opt>
                   | "break" <white_space_character_list_opt> ";" <white_space_character_list_opt>
                   | "return" <expression_after_whitespaces_opt> <expression_opt> ";" <white_space_character_list_opt>

//  A.2.4 External definitions

<translation_unit> ::= <external_declaration>
                     | <translation_unit> <external_declaration>

<external_declaration> ::= <function_definition>
                         | <declaration>

<function_definition> ::= <declaration_specifiers> <left_whitespace_declarator> <declaration_list_opt> <compound_statement>

<declaration_list_opt> ::= "" | <declaration_list>

<declaration_list> ::= <declaration>
                     | <declaration_list> <declaration>

//  A.3 Preprocessing directives

<preprocessing_file> ::= <group_opt>

<group_opt> ::= "" | <group>

<group> ::= <group_part>
          | <group> <new_line> <white_space_character_list_opt> <group_part>

<group_part> ::= <if_section>
               | <control_line>
               | <text_line>

<if_section> ::= <if_group> <elif_groups_opt> <else_group_opt> <endif_line>

<if_group> ::= "#if(" <constant_expression> ")" <space_character_list_opt> <new_line> <white_space_character_list_opt> <group_opt>
             | "#if" <space_character_list> <constant_expression> <new_line> <white_space_character_list_opt> <group_opt>
             | "#ifdef" <space_character_list> <identifier> <space_character_list_opt> <new_line> <white_space_character_list_opt> <group_opt>
             | "#ifndef" <space_character_list> <identifier> <space_character_list_opt> <new_line> <white_space_character_list_opt> <group_opt>

<elif_groups_opt> ::= "" | <elif_groups>

<elif_groups> ::= <elif_group>
                | <elif_groups> <elif_group>

<elif_group> ::= "#elif" <space_character_list> <constant_expression> <new_line> <white_space_character_list_opt> <group_opt>

<else_group_opt> ::= "" | <else_group>

<else_group> ::= "#else" <space_character_list_opt> <new_line> <white_space_character_list_opt> <group_opt>

<endif_line> ::= "#endif" <space_character_list_opt>

<control_line> ::= "#include" <space_character_list_opt> <header_name> <space_character_list_opt>
                 | "#define" <space_character_list> <identifier> <replacement_list> <space_character_list_opt>
                 | "#define" <space_character_list> <identifier> <lparen> <space_character_list_opt> <pp_identifier_list_opt> ")" <replacement_list> <space_character_list_opt>
                 | "#define" <space_character_list> <identifier> <lparen> <space_character_list_opt> "..." <space_character_list_opt> ")" <replacement_list> <space_character_list_opt>
                 | "#define" <space_character_list> <identifier> <lparen> <space_character_list_opt> <pp_identifier_list> "," <space_character_list_opt> "..." <space_character_list_opt> ")" <replacement_list> <space_character_list_opt>
                 | "#undef" <space_character_list> <identifier> <space_character_list_opt>
                 | "#error" <pp_tokens_after_space_opt> <space_character_list_opt>
                 | "#pragma" <pp_tokens_after_space_opt> <space_character_list_opt>
                 | "#" <space_character_list_opt>

<text_line> ::= <space_character_list_opt> <pp_tokens_opt> <space_character_list_opt>

<lparen> ::= "("

<replacement_list> ::= <pp_tokens_after_space_opt>

<pp_tokens_after_space_opt> ::= "" | <pp_tokens_after_space>

<pp_tokens_after_space> ::= <space_character_list> <pp_tokens>

<pp_tokens_opt> ::= "" | <pp_tokens>

<pp_tokens> ::= <header_name> <pp_tokens_after_type_a_opt>
              | <identifier> <pp_tokens_after_type_b_opt>
              | <pp_number> <pp_tokens_after_type_b_opt>
              | <character_constant> <pp_tokens_after_type_a_opt>
              | <string_literal> <pp_tokens_after_type_a_opt>
              | <punctuator> <pp_tokens_after_type_a_opt>
              | <non_white_space_character> <pp_tokens_after_type_a_opt>

<pp_tokens_after_type_a_opt> ::= "" | <pp_tokens_after_type_a>

<pp_tokens_after_type_a> ::= <space_character_list_opt> <header_name> <pp_tokens_after_type_a_opt>
                           | <space_character_list_opt> <identifier> <pp_tokens_after_type_b_opt>
                           | <space_character_list_opt> <pp_number> <pp_tokens_after_type_b_opt>
                           | <space_character_list_opt> <character_constant> <pp_tokens_after_type_a_opt>
                           | <space_character_list_opt> <string_literal> <pp_tokens_after_type_a_opt>
                           | <space_character_list_opt> <punctuator> <pp_tokens_after_type_a_opt>
                           | <space_character_list_opt> <non_white_space_character> <pp_tokens_after_type_a_opt>

<pp_tokens_after_type_b_opt> ::= "" | <pp_tokens_after_type_b>

<pp_tokens_after_type_b> ::= <space_character_list_opt> <header_name> <pp_tokens_after_type_a_opt>
                           | <space_character_list> <identifier> <pp_tokens_after_type_b_opt>
                           | <space_character_list> <pp_number> <pp_tokens_after_type_b_opt>
                           | <space_character_list_opt> <character_constant> <pp_tokens_after_type_a_opt>
                           | <space_character_list_opt> <string_literal> <pp_tokens_after_type_a_opt>
                           | <space_character_list_opt> <punctuator> <pp_tokens_after_type_a_opt>
                           | <space_character_list_opt> <non_white_space_character> <pp_tokens_after_type_a_opt>

<new_line> ::= "\r\n" | "\n"

<pp_identifier_list_opt> ::= "" | <pp_identifier_list>

<pp_identifier_list> ::= <identifier> <space_character_list_opt>
                       | <pp_identifier_list> "," <space_character_list_opt> <identifier> <space_character_list_opt>

// B.1 Whitespace extensions
//  B.1.x Forced whitespace after certain keywords

<declaration_specifiers_after_white_spaces_opt> ::= "" | <declaration_specifiers_after_white_spaces>

<declaration_specifiers_after_white_spaces> ::= <white_space_character_list> <declaration_specifiers>

<specifier_qualifier_list_after_whitespaces_opt> ::= "" | <specifier_qualifier_list_after_whitespaces>

<specifier_qualifier_list_after_whitespaces> ::= <white_space_character_list> <specifier_qualifier_list>

<identifier_after_whitespaces_opt> ::= "" | <identifier_after_whitespaces>

<identifier_after_whitespaces> ::= <white_space_character_list> <identifier>

<expression_after_whitespaces_opt> ::= "" | <expression_after_whitespaces>

<expression_after_whitespaces> ::= <white_space_character_list> <expression>

//  B.1.x Standard whitespace

<white_space_character_list_opt> ::= "" | <white_space_character_list> <white_space_character_list_opt>

<white_space_character_list> ::= <white_space_character>
                               | <white_space_character> <white_space_character_list>

<white_space_character> ::= <space_character>
                          | <new_line>

<space_character_list_opt> ::= "" | <space_character_list>

<space_character_list> ::= <space_character>
                         | <space_character> <space_character_list>

<space_character> ::= " " | "\t"
