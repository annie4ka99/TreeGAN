start : opt_whitespace method_declaration opt_whitespace

method_declaration : method_header opt_whitespace method_body opt_whitespace

formal_parameter_list : formal_parameter | formal_parameter_list opt_whitespace "," opt_whitespace formal_parameter

formal_parameter : variable_modifier whitespace type whitespace variable_declarator_id
                     | type whitespace variable_declarator_id

throws : "throws" whitespace class_type_list

class_type_list : class_type | class_type_list opt_whitespace "," opt_whitespace class_type

variable_declarators : variable_declarator | variable_declarators opt_whitespace "," opt_whitespace variable_declarator

variable_declarator : variable_declarator_id | variable_declarator_id opt_whitespace "=" opt_whitespace variable_initializer

variable_declarator_id : identifier | variable_declarator_id opt_whitespace "[" opt_whitespace "]"

variable_initializer : expression | array_initializer

method_header : method_modifiers whitespace result_type whitespace method_declarator opt_whitespace throws
                  | method_modifiers whitespace result_type whitespace method_declarator
                  | result_type whitespace method_declarator opt_whitespace throws
                  | result_type whitespace method_declarator

result_type : type | "void"

method_modifiers : method_modifier | method_modifiers whitespace method_modifier

method_modifier : "public" | "protected" | "private" | "static" | "abstract" | "final" | "synchronized" | "native"

method_declarator : identifier opt_whitespace "(" opt_whitespace ")"
                      | identifier opt_whitespace "(" opt_whitespace formal_parameter_list opt_whitespace ")"

method_body : block | ";"

array_initializer : "{" opt_whitespace "}" | "{" opt_whitespace variable_initializers opt_whitespace "}"

variable_initializers : variable_initializer
                          | variable_initializers opt_whitespace "," opt_whitespace variable_initializer

type : primitive_type | reference_type

primitive_type : numeric_type | "boolean"

numeric_type : integral_type | floating_point_type

integral_type : "byte" | "short" | "int" | "long" | "char"

floating_point_type : "float" | "double"

reference_type : class_or_interface_type | array_type

class_or_interface_type : class_type | interface_type

class_type : type_name

interface_type : type_name

array_type : type "[" "]"

block : "{" opt_whitespace "}" | "{" opt_whitespace block_statements opt_whitespace "}"

block_statements : block_statement | block_statements opt_whitespace block_statement

block_statement : local_variable_declaration_statement | statement

local_variable_declaration_statement : local_variable_declaration opt_whitespace ";"

local_variable_declaration : variable_modifier whitespace type whitespace variable_declarators
                               | type whitespace variable_declarators

variable_modifier : "final"

statement : statement_without_trailing_substatement
              | labeled_statement
              | if_then_statement
              | if_then_else_statement
              | while_statement
              | for_statement

statement_no_short_if : statement_without_trailing_substatement
                          | labeled_statement_no_short_if
                          | if_then_else_statement_no_short_if
                          | while_statement_no_short_if
                          | for_statement_no_short_if

statement_without_trailing_substatement : block
                                            | empty_statement
                                            | expression_statement
                                            | switch_statement
                                            | do_statement
                                            | break_statement
                                            | continue_statement
                                            | return_statement
                                            | synchronized_statement
                                            | throws_statement
                                            | try_statement

empty_statement : ";"

labeled_statement : identifier opt_whitespace ":" opt_whitespace statement

labeled_statement_no_short_if : identifier opt_whitespace ":" opt_whitespace statement_no_short_if

expression_statement : statement_expression opt_whitespace ";"

statement_expression : assignment
                         | preincrement_expression
                         | postincrement_expression
                         | predecrement_expression
                         | postdecrement_expression
                         | method_invocation
                         | class_instance_creation_expression

if_then_statement : "if" opt_whitespace "(" opt_whitespace expression opt_whitespace ")" opt_whitespace statement

if_then_else_statement : "if" opt_whitespace "(" opt_whitespace expression opt_whitespace ")" opt_whitespace statement_no_short_if opt_whitespace "else" opt_whitespace statement

if_then_else_statement_no_short_if : "if" opt_whitespace "(" opt_whitespace expression opt_whitespace ")" opt_whitespace statement_no_short_if opt_whitespace "else" opt_whitespace statement_no_short_if

switch_statement : "switch" opt_whitespace "(" opt_whitespace expression opt_whitespace ")" opt_whitespace switch_block

switch_block : "{" opt_whitespace "}"
                 | "{" opt_whitespace switch_labels opt_whitespace "}"
                 | "{" opt_whitespace switch_block_statement_groups opt_whitespace "}"
                 | "{" opt_whitespace switch_block_statement_groups opt_whitespace switch_labels opt_whitespace "}"

switch_block_statement_groups : switch_block_statement_group
                                  | switch_block_statement_groups opt_whitespace switch_block_statement_group

switch_block_statement_group : switch_labels opt_whitespace block_statements

switch_labels : switch_label | switch_labels whitespace switch_label

switch_label : "case" whitespace constant_expression opt_whitespace ":" | "default" opt_whitespace ":"

while_statement : "while" opt_whitespace "(" opt_whitespace expression opt_whitespace ")" opt_whitespace statement

while_statement_no_short_if : "while" opt_whitespace "(" opt_whitespace expression opt_whitespace ")" opt_whitespace statement_no_short_if

do_statement : "do" opt_whitespace statement opt_whitespace "while" opt_whitespace "(" opt_whitespace expression opt_whitespace ")" opt_whitespace ";"

for_statement : "for" opt_whitespace "(" opt_whitespace maybe_for_init opt_whitespace ";" opt_whitespace maybe_expression opt_whitespace ";" opt_whitespace maybe_for_update opt_whitespace ")" opt_whitespace statement

maybe_expression : expression?

for_statement_no_short_if : "for" opt_whitespace "(" opt_whitespace maybe_for_init opt_whitespace ";" opt_whitespace maybe_expression opt_whitespace ";" opt_whitespace maybe_for_update opt_whitespace ")" opt_whitespace statement_no_short_if

maybe_for_init : for_init?

for_init : statement_expression_list | local_variable_declaration

maybe_for_update : for_update?

for_update : statement_expression_list

statement_expression_list : statement_expression | statement_expression_list opt_whitespace "," opt_whitespace statement_expression

break_statement : "break" opt_whitespace ";" | "break" whitespace identifier opt_whitespace ";"

continue_statement : "continue" opt_whitespace ";" | "continue" whitespace identifier opt_whitespace ";"

return_statement : "return" opt_whitespace ";" | "return" whitespace expression opt_whitespace ";"

throws_statement : "throw" whitespace expression opt_whitespace ";"

synchronized_statement : "synchronized" opt_whitespace "(" opt_whitespace expression opt_whitespace ")" opt_whitespace block

try_statement : "try" opt_whitespace block opt_whitespace catches opt_whitespace finally
                  | "try" opt_whitespace block opt_whitespace catches
                  | "try" opt_whitespace block opt_whitespace finally

catches : catch_clause | catches opt_whitespace catch_clause

catch_clause : "catch" opt_whitespace "(" opt_whitespace formal_parameter opt_whitespace ")" opt_whitespace block

finally : "finally" opt_whitespace block

constant_expression : expression

expression : assignment_expression

assignment_expression : conditional_expression | assignment

assignment : left_hand_side opt_whitespace assignment_operator opt_whitespace assignment_expression

left_hand_side : expression_name | field_access | array_access

assignment_operator : "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="

conditional_expression : conditional_or_expression
                           | conditional_or_expression opt_whitespace "?" whitespace expression opt_whitespace ":" whitespace conditional_expression

conditional_or_expression : conditional_and_expression
                              | conditional_or_expression opt_whitespace "||" opt_whitespace conditional_and_expression

conditional_and_expression : inclusive_or_expression
                               | conditional_and_expression opt_whitespace "&&" opt_whitespace inclusive_or_expression

inclusive_or_expression : exclusive_or_expression
                            | inclusive_or_expression opt_whitespace "|" opt_whitespace exclusive_or_expression

exclusive_or_expression : and_expression
                            | exclusive_or_expression opt_whitespace "^" opt_whitespace and_expression

and_expression : equality_expression
                   | and_expression opt_whitespace "&" opt_whitespace equality_expression

equality_expression : relational_expression
                        | equality_expression opt_whitespace "==" opt_whitespace relational_expression
                        | equality_expression opt_whitespace "!=" opt_whitespace relational_expression

relational_expression : shift_expression
                          | relational_expression opt_whitespace "<" opt_whitespace shift_expression
                          | relational_expression opt_whitespace ">" opt_whitespace shift_expression
                          | relational_expression opt_whitespace "<=" opt_whitespace shift_expression
                          | relational_expression opt_whitespace ">=" opt_whitespace shift_expression
                          | relational_expression whitespace "instanceof" whitespace reference_type

shift_expression : additive_expression
                     | shift_expression opt_whitespace "<<" opt_whitespace additive_expression
                     | shift_expression opt_whitespace ">>" opt_whitespace additive_expression
                     | shift_expression opt_whitespace ">>>" opt_whitespace additive_expression

additive_expression : multiplicative_expression
                        | additive_expression opt_whitespace "+" opt_whitespace multiplicative_expression
                        | additive_expression opt_whitespace "-" opt_whitespace multiplicative_expression

multiplicative_expression : unary_expression
                              | multiplicative_expression opt_whitespace "*" opt_whitespace unary_expression
                              | multiplicative_expression opt_whitespace "/" opt_whitespace unary_expression
                              | multiplicative_expression opt_whitespace "%" opt_whitespace unary_expression

cast_expression : "(" opt_whitespace primitive_type opt_whitespace ")" opt_whitespace unary_expression
                    | "(" opt_whitespace reference_type opt_whitespace ")" opt_whitespace unary_expression_not_plus_minus

unary_expression : preincrement_expression
                     | predecrement_expression
                     | "+" opt_whitespace unary_expression
                     | "-" opt_whitespace unary_expression
                     | unary_expression_not_plus_minus

predecrement_expression : "--" opt_whitespace unary_expression

preincrement_expression : "++" opt_whitespace unary_expression

unary_expression_not_plus_minus : postfix_expression
                                    | "~" opt_whitespace unary_expression
                                    | "!" opt_whitespace unary_expression
                                    | cast_expression

postdecrement_expression : postfix_expression opt_whitespace "--"

postincrement_expression : postfix_expression opt_whitespace "++"

postfix_expression : primary | expression_name | postincrement_expression | postdecrement_expression

method_invocation : method_name opt_whitespace "(" opt_whitespace maybe_argument_list opt_whitespace ")"
                      | primary opt_whitespace "." opt_whitespace identifier opt_whitespace "(" opt_whitespace maybe_argument_list opt_whitespace ")"
                      | "super" opt_whitespace "." opt_whitespace identifier opt_whitespace "(" opt_whitespace maybe_argument_list opt_whitespace ")"

field_access : primary opt_whitespace "." opt_whitespace identifier | "super" opt_whitespace "." opt_whitespace identifier

primary : primary_no_new_array | array_creation_expression

primary_no_new_array : literal
                         | "this"
                         | "(" opt_whitespace expression opt_whitespace ")"
                         | class_instance_creation_expression
                         | field_access
                         | method_invocation
                         | array_access

class_instance_creation_expression : "new" whitespace class_type opt_whitespace "(" opt_whitespace maybe_argument_list opt_whitespace ")"

maybe_argument_list : argument_list?

argument_list : expression | argument_list opt_whitespace "," opt_whitespace expression

array_creation_expression : "new" whitespace primitive_type opt_whitespace dim_exprs opt_whitespace maybe_dims
                              | "new" whitespace class_or_interface_type opt_whitespace dim_exprs opt_whitespace maybe_dims

dim_exprs : dim_expr | dim_exprs opt_whitespace dim_expr

dim_expr : "[" opt_whitespace expression opt_whitespace "]"

maybe_dims : dims?

dims : "[" opt_whitespace "]" | dims opt_whitespace "[" opt_whitespace "]"

array_access : expression_name opt_whitespace "[" opt_whitespace expression opt_whitespace "]"
                 | primary_no_new_array opt_whitespace "[" opt_whitespace expression opt_whitespace "]"

package_name : identifier | package_name opt_whitespace "." opt_whitespace identifier

type_name : identifier | package_name opt_whitespace "." opt_whitespace identifier

simple_type_name : identifier

expression_name : identifier | ambiguous_name opt_whitespace "." opt_whitespace identifier

method_name : identifier | ambiguous_name opt_whitespace "." opt_whitespace identifier

ambiguous_name : identifier | ambiguous_name opt_whitespace "." opt_whitespace identifier

literal : integer_literal
            | floating_point_literal
            | boolean_literal
            | character_literal
            | string_literal
            | null_literal

integer_literal : decimal_integer_literal | hex_integer_literal | octal_integer_literal

decimal_integer_literal :  decimal_numeral maybe_integer_type_suffix

hex_integer_literal : hex_numeral maybe_integer_type_suffix

octal_integer_literal : octal_numeral maybe_integer_type_suffix

maybe_integer_type_suffix : integer_type_suffix?

integer_type_suffix : "l" | "L"

decimal_numeral : "0" | non_zero_digit maybe_digits

maybe_digits : digits?

digits : digit | digits digit

digit : "0" | non_zero_digit

non_zero_digit : "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

hex_numeral : "0" "x" hex_digit | "0" "X" hex_digit | hex_numeral hex_digit

hex_digit : "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

octal_numeral : "0" octal_digit | octal_numeral octal_digit

octal_digit : "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"

floating_point_literal : digits "." maybe_digits maybe_exponent_part maybe_float_type_suffix

maybe_exponent_part : exponent_part?

exponent_part : exponent_indicator signed_integer

exponent_indicator : "e" | "E"

signed_integer : digits | sign digits

sign : "+" | "-"

maybe_float_type_suffix : float_type_suffix?

float_type_suffix : "f" | "F" | "d" | "D"

boolean_literal : "true" | "false"

character_literal : "'" single_character "'" | "'" simple_escape_sequence "'"

single_character : "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r"
| "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L"
| "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5"
| "6" | "7" | "8" | "9" | " " | "!" | "\"" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":"
| ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~"

string_literal : "\"" "\"" | "\"" string_characters "\""

string_characters : string_character | string_characters string_character

string_character : "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r"
| "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L"
| "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5"
| "6" | "7" | "8" | "9" | " " | "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":"
| ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~" | simple_escape_sequence

simple_escape_sequence : "\\'" | "\\\"" | "\\?" | "\\\\" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"

null_literal : "null"

keyword : "abstract" | "boolean" | "break" | "byte" | "case" | "catch" | "char" | "class" | "const" | "continue" | "default" | "do" | "double" | "else" | "extends" | "final" | "finally" | "float" | "for" | "goto" | "if" | "implements" | "import" | "instanceof" | "int" | "interface" | "long" | "native" | "new" | "package" | "private" | "protected" | "public" | "return" | "short" | "static" | "super" | "switch" | "synchronized" | "this" | "throw" | "throws" | "transient" | "try" | "void" | "volatile" | "while"

identifier : nondigit
               | identifier nondigit
               | identifier digit

nondigit : "_" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q"
| "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K"
| "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

whitespace : " "

opt_whitespace : whitespace?