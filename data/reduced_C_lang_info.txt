// UNREACHABLE NON-TERMINALS FROM 'start'
NonTerminal(name='group')
NonTerminal(name='lparen')
NonTerminal(name='non-directive')
NonTerminal(name='header-name')
NonTerminal(name='if-group')
NonTerminal(name='else-group-opt')
NonTerminal(name='h-char-sequence')
NonTerminal(name='else-group')
NonTerminal(name='elif-groups')
NonTerminal(name='preprocessing-token')
NonTerminal(name='group-opt')
NonTerminal(name='h-char')
NonTerminal(name='elif-group')
NonTerminal(name='preprocessing-file')
NonTerminal(name='if-section')
NonTerminal(name='pp-tokens-opt')
NonTerminal(name='punctuator')
NonTerminal(name='pp-tokens')
NonTerminal(name='elif-groups-opt')
NonTerminal(name='q-char-sequence')
NonTerminal(name='token')
NonTerminal(name='replacement-list')
NonTerminal(name='pp-number')
NonTerminal(name='non-white-space-character')
NonTerminal(name='endif-line')
NonTerminal(name='control-line')
NonTerminal(name='keyword')
NonTerminal(name='q-char')
NonTerminal(name='text-line')
NonTerminal(name='group-part')

// TO LOCATE LEFT RECURSIVE RULES
^([a-z_]+) +:[^:]+(: | \|) \1[^a-z_]


PHRASES:
primary_expression
expression
generic_selection
assignment_expression
generic_assoc_list
generic_association
postfix_expression
argument_expression_list_opt
initializer_list
argument_expression_list
unary_expression
cast_expression
multiplicative_expression
additive_expression
shift_expression
relational_expression
equality_expression
and_expression
exclusive_or_expression
inclusive_or_expression
logical_and_expression
logical_or_expression
conditional_expression
assignment_expression_opt
expression_opt
declaration
declaration_specifiers_opt
declaration_specifiers
init_declarator_list_opt
init_declarator_list
static_assert_declaration
init_declarator
declarator
initializer
atomic_type_specifier
struct_or_union_specifier
enum_specifier
struct_declaration_list
struct_declaration
struct_declarator_list_opt
specifier_qualifier_list
specifier_qualifier_list_opt
struct_declarator_list
struct_declarator
declarator_opt
constant_expression
enumerator_list
enumerator
alignment_specifier
pointer_opt
pointer
direct_declarator
type_qualifier_list_opt
type_qualifier_list
parameter_type_list
parameter_list
identifier_list_opt
identifier_list
parameter_type_list_opt
parameter_declaration
abstract_declarator_opt
type_name
abstract_declarator
direct_abstract_declarator
direct_abstract_declarator_opt
designation_opt
designation
designator_list
designator
statement
labeled_statement
compound_statement
expression_statement
selection_statement
iteration_statement
jump_statement
block_item_list_opt
block_item_list
block_item
translation_unit
external_declaration
function_definition
declaration_list
declaration_list_opt
start